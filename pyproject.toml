# See:
#  https://medium.com/@Mr_Pepe/setting-your-python-project-up-for-success-in-2024-365e53f7f31e
#  https://setuptools.pypa.io/en/latest/userguide/development_mode.html
#  https://github.com/Mr-Pepe/python-template
#    pip install cruft ruff cookiecutter && cruft create git@github.com:Mr-Pepe/python-template.git # Broken on Windows!


[build-system]
requires      = ["setuptools>=61.0.0"]
# requires      = ["setuptools>=68", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "pi_base"
# version = "0.0.1"
authors = [
  { name="Ilya Ivanchenko", email="iva2k@yahoo.com" },
]
description = ""
keywords = ["raspberry pi"]
readme = "pi_base/README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dynamic = ["version"]
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [
  "importlib-metadata",
  # Add runtime dependencies here
]

# [project.optional-dependencies]
# dev = ["check-manifest"]
# test = ["coverage"]

[project.urls]
Homepage = "https://github.com/iva2k/pi-base"
Issues = "https://github.com/iva2k/pi-base/issues"

[project.scripts]
# pi-base = "pi_base:main"
pi-base = "Project.pi_base:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
# If there are data files included in your packages that need to be installed, specify them here.
"pi_base" = ["*.txt", "*.sh", "*.cmd"]
"pi_base.lib" = ["*"]

[tool.setuptools.packages.find]
namespaces = true
# where = ["."]
include = [
  "pi_base*",
]
exclude = [
  "pi_base.tests*",
  "pi_base.pictures*",
  "pi_base.scripts*"
]

# Enables the usage of setuptools_scm
# [tool.setuptools_scm]

[project.optional-dependencies]
dev = [
  "pi_base[tox]",
  "pi_base[lint]",
  "pi_base[test]",
  "pi_base[doc]",
  "pi_base[build]",
]
tox = [
  "tox==4.11.1",
]
lint = [
  "mypy==1.5.1",
  "pytest==7.4.1",
  "types-docutils",
  "types-setuptools",
  "jinja2==3.1.2",
  "ruff==0.1.6",
]
test = [
  "pytest==7.4.1",
  "pytest-randomly==3.15.0",
  "pytest-cov==4.1.0",
  "coverage[toml]==7.3.1",
]
doc = [
  "sphinx==7.2.6",
  "sphinx_rtd_theme==1.3.0",
  "sphinx-autodoc-typehints==1.24.0",
  "pip-licenses==4.3.2",
  "jinja2==3.1.2",
]
build = [
  "build[virtualenv]==1.0.3",
]


[tool.pyright]
exclude = ["build/**"]

[tool.ruff]
line-length = 200
src = ["pi_base"]
extend-exclude = [
  "conf.py",
]
target-version = "py38"
select = ["ALL"]
ignore = [
  "COM812",   # Conflicts with the formatter
  "ISC001",   # Conflicts with the formatter
  "ANN101",   # "missing-type-self"
  "PT001",    # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
  "PT004",    # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
  "PT005",    # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
  "PT023",    # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
]

[tool.ruff.per-file-ignores]
"tests/**" = [
  "S101", # Use of `assert` detected
  "D103", # Missing docstring in public function
]
"**/__init__.py" = [
  "F401", # Imported but unused
  "F403", # Wildcard imports
]
"docs/**" = [
  "INP001",   # Requires __init__.py but docs folder is not a package.
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`(https://github.com/astral-sh/ruff/issues/5434)
keep-runtime-typing = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
disallow_untyped_defs = true # Functions need to be annotated
warn_unused_ignores = true
exclude = [
  "pi_base-\\d+", # Ignore temporary folder created by setuptools when building an sdist
  "venv.*/",
  "build/",
  "dist/",
]

[tool.pytest.ini_options]
addopts = """
  --vv
  --doctest-modules
  --import-mode=append
  --ignore-glob={{ cookiecutter.package_name }}-[0-9]*
  --ignore="docs/_scripts"
  --cov=pi_base
  --cov-config=pyproject.toml
  --cov-report=
  """

[tool.coverage.run]
branch = true

[tool.coverage.paths]
# Maps coverage measured in site-packages to source files in src
source = ["pi_base", ".tox/*/lib/python*/site-packages/"]

[tool.coverage.report]
exclude_also = [
  "\\.\\.\\.",
  "if TYPE_CHECKING:"
  ]
partial_branches = [
  "pragma: no branch",
  "if not TYPE_CHECKING:"
  ]

[tool.coverage.html]
directory = "reports/coverage_html"

[tool.coverage.xml]
output = "reports/coverage.xml"

[[tool.mypy.overrides]]
module = [
  # Ignore packages that do not provide type hints here
  # For example, add "dash.*" to ignore all imports from Dash
  ]
ignore_missing_imports = true
