# Tox pipelines

[tox]
envlist =
    lint
    # types
    {py39,py310,py311}-test
    combine-test-reports

# Define the minimal tox version required to run;
# if the host tox is less than this the tool with create an environment and
# provision it with a tox that satisfies it under provision_tox_env.
# At least this version is needed for PEP 517/518 support.
minversion = 3.3.0

# Activate isolated build environment. tox will use a virtual environment
# to build a source distribution from the source tree. For build tools and
# arguments use the pyproject.toml file as specified in PEP-517 and PEP-518.
isolated_build = True


[testenv]
# Comman for all environments
allowlist_externals=
  ruff
  pytest

[testenv:format]
description = Fix formatting.
basepython = py39
skip_install = True
passenv = CODEMETER_HOST
commands =
    # Fix formatting
    ruff format .

[testenv:lint]
description = Run static checkers.
basepython = py39
skip_install = True
passenv = CODEMETER_HOST
commands =
    # Check formatting
    ruff format . --check
    # Lint code and docstrings
    ruff check .

[testenv:types]
description = Run static type checkers.
basepython = py39
skip_install = True
passenv = CODEMETER_HOST
commands =
    # Use mypy (slower) or pyright (faster)
    # Check type hinting
    # mypy . --explicit-package-bases
    # --explicit-package-bases works around mypy bug/feature erroring on duplicate file names (e.g. modprobe.py)  across the sourcetree.
    # pyright --stats --verbose {posargs}
    pyright --stats {posargs}
    # pyright {posargs}

[testenv:{py39,py310,py311}-test]
description = Run unit tests.
# For development, use `package=editable` as it skips building the wheel and uses `pip install -e`
# package = editable
package = wheel
# `wheel_build_env = .pkg` uses single wheel build and installs it into each environment.
# https://hynek.me/articles/turbo-charge-tox/
wheel_build_env = .pkg
extras = tests
setenv =
    PY_IGNORE_IMPORTMISMATCH=1 # https://github.com/pytest-dev/pytest/issues/2042
    COVERAGE_FILE = reports{/}.coverage.{envname}
commands =
    # Run tests and doctests from .py files
    pytest --junitxml=reports/pytest.xml.{envname} {posargs:pi_base/tests}

# Fix coverage with pytest parallelism (if needed) using coverage-enable-subprocess
# https://hynek.me/articles/turbo-charge-tox/
# deps =
#     coverage[toml]
#     coverage-enable-subprocess
#     pytest
#     pytest-xdist
# set_env = COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
# commands = coverage run -m pytest {posargs:-n auto}
# Firther, this removes need for coverage-enable-subprocess (which relieas on features that can get deprecated soon):
# commands_pre = python -c 'import pathlib; pathlib.Path("{env_site_packages_dir}/cov.pth").write_text("import coverage; coverage.process_startup()")'

[testenv:.pkg]
description = Common wheel build for all environments.
# https://hynek.me/articles/turbo-charge-tox/
pass_env = SETUPTOOLS_SCM_PRETEND_VERSION

[testenv:combine-test-reports]
description = Combine test and coverage data from multiple test runs.
skip_install = true
setenv =
    COVERAGE_FILE = reports/.coverage
depends = {py39,py310,py311}-test
deps =
    junitparser
    coverage[toml]
commands =
    junitparser merge --glob reports/pytest.xml.* reports/pytest.xml
    coverage combine --keep
    coverage html
    coverage xml


[testenv:docs]
description = Test and build the docs.
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/build
extras = doc
passenv = CODEMETER_HOST
commands =
    # Remove build directory
    python -c 'import shutil; shutil.rmtree("{env:BUILDDIR}", ignore_errors=True);'
    # Delete all files generated by sphinx-apidoc
    python -c 'import glob, os; [os.remove(f) for f in glob.glob("docs/pi_base*")];'
    # Create dummy files to prevent warnings
    python -c 'import pathlib; pathlib.Path("{env:DOCSDIR}").joinpath("pi_base.rst").write_text("");'
    python -c 'import pathlib; pathlib.Path("{env:DOCSDIR}").joinpath("license_compliance.rst").write_text("");'
    # Run doctests (only from .rst files in docs folder, doctests in .py files are covered by pytest)
    sphinx-build -b doctest -W -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/doctest" {posargs}
    # Autogenerate docs from code
    sphinx-apidoc -f --no-toc -o docs/ pi_base
    # Dump OSS license information into the docs directory
    python {env:DOCSDIR}/_scripts/generate_license_information.py
    # Build the docs
    sphinx-build -b html -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/html" {posargs}


[testenv:build]
description = Build the package.
extras = build
passenv = CODEMETER_HOST
commands =
    # Clean up build directories
    python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    # Build the package
    python -m build .







# UNUSED, old example:
# [testenv]
# deps =
#     check-manifest >= 0.42
#     # If your project uses README.rst, uncomment the following:
#     # readme_renderer
#     flake8
#     pytest
#     build
#     twine
# commands =
#     check-manifest --ignore 'tox.ini,pi_base/tests/**'
#     python -m build
#     python -m twine check dist/*
#     flake8 .
#     pytest pi_base/tests {posargs}
# 
# [flake8]
# exclude = .tox,*.egg,build,data
# select = E,W,F
