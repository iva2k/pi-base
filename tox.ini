# Tox pipelines

[tox]
envlist =
    lint
    {py38,py39,py310,py311}-test
    combine-test-reports

# Define the minimal tox version required to run;
# if the host tox is less than this the tool with create an environment and
# provision it with a tox that satisfies it under provision_tox_env.
# At least this version is needed for PEP 517/518 support.
minversion = 3.3.0

# Activate isolated build environment. tox will use a virtual environment
# to build a source distribution from the source tree. For build tools and
# arguments use the pyproject.toml file as specified in PEP-517 and PEP-518.
isolated_build = True


[testenv:lint]
description = Run static checkers.
basepython = py38
extras = lint
commands =
    # Check formatting
    ruff format . --check
    # Lint code and docstrings
    ruff check .
    # Check type hinting
    mypy .

[testenv:{py38,py39,py310,py311}-test]
description = Run doc tests and unit tests.
package = wheel
extras = test
    PY_IGNORE_IMPORTMISMATCH=1 # https://github.com/pytest-dev/pytest/issues/2042
    COVERAGE_FILE = reports{/}.coverage.{envname}
commands =
    # Run tests and doctests from .py files
    pytest --junitxml=reports/pytest.xml.{envname} {posargs}


[testenv:combine-test-reports]
description = Combine test and coverage data from multiple test runs.
skip_install = true
setenv =
    COVERAGE_FILE = reports/.coverage
depends = {py38,py39,py310,py311}-test
deps =
    junitparser
    coverage[toml]
commands =
    junitparser merge --glob reports/pytest.xml.* reports/pytest.xml
    coverage combine --keep
    coverage html


[testenv:docs]
description = Test and build the docs.
extras = docs
commands =
    sphinx-build -b html -d "docs/build/doctrees" "docs" "docs/build/html"


[testenv:build]
description = Build the package.
extras = build
commands =









[testenv]
deps =
    check-manifest >= 0.42
    # If your project uses README.rst, uncomment the following:
    # readme_renderer
    flake8
    pytest
    build
    twine
commands =
    check-manifest --ignore 'tox.ini,pi_base/tests/**'
    python -m build
    python -m twine check dist/*
    flake8 .
    py.test pi_base/tests {posargs}

[flake8]
exclude = .tox,*.egg,build,data
select = E,W,F
